name: "CIFAR10_small"
force_backward: true
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"  
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: true
    mean_file: "/home/domen/caffe/caffe-gauss/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/domen/caffe/caffe-gauss/examples/cifar10/cifar10_train_lmdb"
    batch_size: 100
    backend: LMDB
  }
}

layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mean_file: "/home/domen/caffe/caffe-gauss/examples/cifar10/mean.binaryproto"
  }
  data_param {
    source: "/home/domen/caffe/caffe-gauss/examples/cifar10/cifar10_test_lmdb"
    batch_size: 20
    backend: LMDB
  }
  
}

layer {
  name: "conv1"
  type: "GaussianConv"  
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  param {
    lr_mult: 5
    decay_mult: 0
  }
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 2
    num_output: 96
    pad: 3
    kernel_size: 7
    stride: 1
        
    gmm_weight_normalization: false
    gmm_gauss_normalization: true
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8     
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "batch_norm1"
  type: "BatchNorm"
  bottom: "conv1"
  top: "batch_norm1"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm1"
  top: "scale1"
  name: "scale1"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu1"
  type: "ReLU"
  bottom: "scale1"
  top: "relu1"
}
layer {
  name: "conv2"
  type: "GaussianConv"
  bottom: "relu1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
    #decay_mult: 1
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 1
    number_gauss: 2
    num_output: 96
    pad: 4
    kernel_size: 9
    stride: 1
    
    gmm_weight_normalization: false
    gmm_gauss_normalization: true # wasnt tried before when got 45%
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "batch_norm2"
  type: "BatchNorm"
  bottom: "conv2"
  top: "batch_norm2"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm2"
  top: "scale2"
  name: "scale2"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu2"
  type: "ReLU"
  bottom: "scale2"
  top: "relu2"
}
layer {
  name: "pool2"
  type: "Pooling"
  bottom: "relu2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

layer {
  name: "conv3"
  type: "GaussianConv"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
    #decay_mult: 1
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 1
    number_gauss: 2
    num_output: 192
    pad: 4
    kernel_size: 9
    stride: 1
    
    gmm_weight_normalization: false
    gmm_gauss_normalization: true # wasnt tried before when got 45%
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8
    }
    bias_filler {
      type: "constant"
    }
  }
}

layer {
  name: "batch_norm3"
  type: "BatchNorm"
  bottom: "conv3"
  top: "batch_norm3"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm3"
  top: "scale3"
  name: "scale3"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu3"
  type: "ReLU"
  bottom: "scale3"
  top: "relu3"
}




layer {
  name: "conv4"
  type: "GaussianConv"
  bottom: "relu3"
  top: "conv4"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
    #decay_mult: 1
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 1
    number_gauss: 2
    num_output: 192
    pad: 4
    kernel_size: 9
    stride: 1
    
    gmm_weight_normalization: false
    gmm_gauss_normalization: true # wasnt tried before when got 45%
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "batch_norm4"
  type: "BatchNorm"
  bottom: "conv4"
  top: "batch_norm4"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm4"
  top: "scale4"
  name: "scale4"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu4"
  type: "ReLU"
  bottom: "scale4"
  top: "relu4"
}
layer {
  name: "pool4"
  type: "Pooling"
  bottom: "relu4"
  top: "pool4"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}

layer {
  name: "conv5"
  type: "GaussianConv"
  bottom: "pool4"
  top: "conv5"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
    #decay_mult: 1
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 1
    number_gauss: 2
    num_output: 128 #192
    pad: 4
    kernel_size: 9
    stride: 1
    
    gmm_weight_normalization: false
    gmm_gauss_normalization: true # wasnt tried before when got 45%
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "batch_norm5"
  type: "BatchNorm"
  bottom: "conv5"
  top: "batch_norm5"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm5"
  top: "scale5"
  name: "scale5"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu5"
  type: "ReLU"
  bottom: "scale5"
  top: "relu5"
}


layer {
  name: "conv6"
  type: "GaussianConv"
  bottom: "relu5"
  top: "conv6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 500
    decay_mult: 0
  }
  param {
    lr_mult: 50
    decay_mult: 0
  }
  
  # dummy - old depricated paramater
  param {
    lr_mult: 0
    decay_mult: 0
  }
  # bias
  param {
    lr_mult: 0
    #decay_mult: 1
  }
  # set zero learning rate for blobs that are for debuging only
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  param { lr_mult: 0 }
  
  convolution_param {
    engine: CUDNN
    number_gauss: 1
    number_gauss: 2
    num_output: 128 #192
    pad: 4
    kernel_size: 9
    stride: 1
    
    gmm_weight_normalization: false
    gmm_gauss_normalization: true # wasnt tried before when got 45%
    gmm_mean_iteration_step: 1
    gmm_sigma_iteration_step: 1
    gmm_sigma_lower_bound: 0.5
    gmm_component_border_bound: 1.5
    
    weight_filler {
      type: "gaussian"
      std: 0.01
      mean: 0
    }
    sigma_filler {
      type: "constant"
      value: 0.8
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "batch_norm6"
  type: "BatchNorm"
  bottom: "conv6"
  top: "batch_norm6"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm6"
  top: "scale6"
  name: "scale6"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}


layer {
  name: "relu6"
  type: "ReLU"
  bottom: "scale6"
  top: "relu6"
}

layer {
  name: "conv7"
  type: "Convolution"
  bottom: "relu6"
  top: "conv7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 1
  }
  convolution_param {
    num_output: 10
    pad: 1
    kernel_size: 1
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
    }
  }
}


layer {
  name: "batch_norm7"
  type: "BatchNorm"
  bottom: "conv7"
  top: "batch_norm7"
  param { lr_mult:0 }
  param { lr_mult:0 }
  param { lr_mult:0 }
  batch_norm_param {    
    #use_global_stats: false
    moving_average_fraction: 0
  }
}

layer {
  bottom: "batch_norm7"
  top: "scale7"
  name: "scale7"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "relu7"
  type: "ReLU"
  bottom: "scale7"
  top: "relu7"
}


layer {
  name: "pool7"
  type: "Pooling"
  bottom: "relu7"
  top: "pool7"
  pooling_param {
    pool: AVE
    global_pooling: true
  }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "pool7"
  bottom: "label"
  top: "accuracy"
  include {
    phase: TEST
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "pool7"
  bottom: "label"
  top: "loss"
}
